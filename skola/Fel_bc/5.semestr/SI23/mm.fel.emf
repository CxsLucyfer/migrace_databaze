@namespace(uri="http://www.collectionspro.eu/jam/mm", prefix="mm")
package mm;

abstract class Element {
	op Element[0..1] container();

	op Element[0..1] rootElement();

	ordered unique op Element[*] allContainers();

	!ordered op Element[*] content();

	!ordered op Element[*] references();
}

abstract class Library extends Element {
}

@namespace(uri="http://www.collectionspro.eu/jam/mm/kernel", prefix="mmk")
package kernel {
	@OCL(inv="self.name.find(' ') = 0")
	// TODO: populate the list, move it to more specific class
	@OCL(inv="not Set{'self','this','new','class','abstract','interface'}
		->includes(self.name)")
	abstract class NamedElement extends Element {
		attr String[1] name;

		@OCL (drv ="self.allNamespaces()->iterate(ns; res: String = self.name |
						ns.name.concat('.').concat(res))")
		derived readonly transient volatile attr String[1] qualifiedName;

		@OCL (drv ="self.allNamespaces()->iterate(ns; res: String = '' |
						ns.name.concat('.').concat(res))")
		derived readonly transient volatile attr String[1] qualifiedPath;

		@DVU (union="true")
		derived readonly volatile transient ref Namespace[0..1] namespace;

		@OCL (body="if self.namespace->isEmpty() then
						OrderedSet{}
					else
						self.namespace.allNamespaces()->prepend(self.namespace)
					endif")
		ordered op Namespace[*] allNamespaces();

		@OCL (body="self.namespace <> other.namespace or self.name <> other.name")
		op Boolean[1] isDistinguishableFrom(NamedElement[1] other);
	}

	@OCL (inv ="self.membersAreDistinguishable()",
			  objs="let members : Set(NamedElement) = self.members -
							(self.members->select(oclIsKindOf(RedefinableElement)).
								oclAsType(RedefinableElement).redefinedElement->asSet()) in
					members->select(m | not members->excluding(m)->forAll(om |
						m.isDistinguishableFrom(om)))")
	abstract class Namespace extends NamedElement {
		@DVU (union="true")
		derived readonly volatile transient !ordered ref NamedElement[*] members;

		@DVU (union="true")
		@DVU (subsets="members")
		derived readonly volatile transient !ordered ref NamedElement[*] ownedMembers;

		@OCL (body="self.members->forAll(m | self.members->excluding(m)->forAll(om |
						m.isDistinguishableFrom(om)
					))")
		op Boolean[1] membersAreDistinguishable();
	}

	//TODO: change back to invariant
	@OCL (rcm ="self.owningPackage->isEmpty() implies self.oclIsKindOf(Package)")
	abstract class PackageableElement extends NamedElement {
		@DVU (subsets="namespace")
		readonly ref Package[0..1]#ownedElements owningPackage;

		@DVU (subsets="self.extensions")
		val extensions.PackageableElementExt[*]#owningPackageableElement packageableElementOwnedExtensions;
	}

	@OCL (inv ="self.name <> self.name.firstToUpper()")
	class Package extends Namespace, PackageableElement {
		@DVU (subsets="ownedMembers")
		!ordered val PackageableElement[*]#owningPackage ownedElements;
	}


	@OCL (inv ="not self.allParents()->includes(self)") // this might be problematic in implementation, may cause infinite loop
	@OCL (desc="Element cannot be both abstract and final.",
		  inv ="self.isAbstract implies not self.isFinal")
	@OCL (desc="Element cannot have a final parent.",
		  inv ="self.parents->forAll(p | not p.isFinal)")
	abstract class InheritableElement extends Namespace {
		attr boolean[1] isAbstract = false;
		attr boolean[1] isFinal = false;

		@OCL (drv ="self.parents->collect(p | p.members)->asOrderedSet()")
		@DVU (subsets="self.members")
		derived readonly transient volatile ref NamedElement[*] inheritedMembers;

		@DVU (union="true")
		derived readonly volatile transient !ordered ref InheritableElement[*] parents;

		@OCL (body="self.parents->union(self.parents->collect(p | p.allParents())->asSet())")
		!ordered op InheritableElement[*] allParents();

		@OCL (body="let members : Set(NamedElement) = self.members -
							(self.members->select(oclIsKindOf(RedefinableElement)).
								oclAsType(RedefinableElement).redefinedElement->asSet()) in
					members->forAll(m | members->excluding(m)->forAll(om |
						m.isDistinguishableFrom(om)
					))")
		op Boolean[1] membersAreDistinguishable();
	}


	@OCL (inv ="self.redefinedElement->notEmpty() implies
					self.redefinedElement.isRedefinableBy(self)")
	abstract class RedefinableElement extends NamedElement {
		@DVU (union="true")
		derived readonly transient volatile ref RedefinableElement[0..1] redefinedElement;

		@DVU (union="true")
		derived readonly transient volatile ref InheritableElement[1] redefinitionContext;

		@OCL (body="false")
		op Boolean[1] isRedefinableBy(RedefinableElement[1] redefinee);

		@OCL (body="if self.redefinedElement->isEmpty() then
						false
					else
						if self.redefinedElement = other then
							true
						else
							self.redefinedElement.redefines(other)
						endif
					endif")
		op Boolean[1] redefines(RedefinableElement other);
	}

	abstract class TemplateableElement extends Namespace {

		@DVU (subsets="self.ownedMembers")
		ordered unique val TypeParameter[*]#owner typeParameters;

		@OCL (body="self.typeParameters->asSequence()->union(
				if self.getEnclosingElement()->notEmpty() then
					self.getEnclosingElement().getAllTypeParameters()->asSequence()
				else Sequence{} endif
			)->asOrderedSet()")
		ordered unique op TypeParameter[*] getAllTypeParameters();

		@OCL (body="self.getAllTypeParameters()->notEmpty()")
		op boolean hasTypeParameters();

		derived op TemplateableElement[0..1] getEnclosingElement();
	}

	class TypeParameter extends NamedElement {
		val ConcreteTypeSpecification[0..1] upperBound;

		@DVU (subsets="self.namespace")
		derived readonly ref TemplateableElement[1]#typeParameters owner;
	}

	abstract class TypeSpecification extends Element {

		// Implemented in concrete child classes
		!ordered unique op Class[*] getReferencedClasses();

		@OCL (drv ="self.getReferencedClasses()")
		!ordered unique derived readonly volatile transient ref Class[*] __referencedClasses;

		// Implemented in concrete child classes
		op boolean hasSuperType(TypeSpecification other);
		op boolean isConcrete();
		op Class getConcreteClass();
	}

	abstract class TypeArgument extends Element {
		// Implemented in concrete child classes
		!ordered unique op Class[*] getReferencedClasses();

		@OCL (drv ="self.getReferencedClasses()")
		!ordered unique readonly derived volatile transient ref Class[*] __referencedClasses;

		op boolean isWildcard();
	}

	class SpecifiedTypeArgument extends TypeArgument {
		val TypeSpecification[1] type;

		@OCL (body="self.type.getReferencedClasses()")
		!ordered unique op Class[*] getReferencedClasses();

		@OCL (body="false")
		op boolean isWildcard();
	}

	class Wildcard extends TypeArgument {
		val TypeSpecification[0..1] lowerBound;
		val TypeSpecification[0..1] upperBound;
		// Because of serialization(?) issue (empty instances are lost)
		attr String[1] dummy;

		@OCL (body="let types : Set(TypeSpecification) = Set{self.lowerBound,self.upperBound} in
					if types->isEmpty() then
						Set{}
					else
						types.getReferencedClasses()->asSet()
					endif")
		!ordered unique op Class[*] getReferencedClasses();

		@OCL (body="true")
		op boolean isWildcard();
	}

	@OCL (inv="self._concreteClass.typeParameters->size() = self.typeArguments->size()")
	class ConcreteTypeSpecification extends TypeSpecification {
		ref Class[1] _concreteClass;
		unique ordered val TypeArgument[*] typeArguments;

		@OCL (body="Set{self._concreteClass}
						->union(self.typeArguments.getReferencedClasses()->asSet())")
		!ordered unique op Class[*] getReferencedClasses();

		@OCL (body="if self._concreteClass.typeParameters->includes(param) then
						self.typeArguments->at(
							self._concreteClass.typeParameters->indexOf(param)
						) -- TODO ??? ordred
					else
						self._concreteClass.parentTypes.getTypeArgument(param)->asSequence()->first()
					endif")
		op TypeArgument[0..1] getTypeArgument(TypeParameter param);

		// TODO: not implemented for all generics yet, only for containers
		// and there must be only specified type arguments, not wildcards
		@OCL (body="if not other.oclIsKindOf(ConcreteTypeSpecification) then
						***
					endif")
		op boolean hasSuperType(TypeSpecification other);

		@OCL (body="true")
		op boolean isConcrete();

		@OCL (body="self._concreteClass")
		op Class getConcreteClass();

		@OCL (body="if self._concreteClass.isContainer then
						self.typeArguments->first().oclAsType(kernel::SpecifiedTypeArgument).type
							.oclAsType(kernel::ConcreteTypeSpecification)._concreteClass
					else null endif")
		op Class[0..1] getClassInContainer();
	}

	class TypeParameterReference extends TypeSpecification {
		ref TypeParameter[1] referencedTypeParameter;

		@OCL (body="Set{}")
		!ordered unique op Class[*] getReferencedClasses();

		@OCL (body ="if self.referencedTypeParameter.upperBound->notEmpty() then
						self.referencedTypeParameter.upperBound.hasSuperType(other)
					else
						false
					endif")
		op boolean hasSuperType(TypeSpecification other);

		@OCL (body="false")
		op boolean isConcrete();

		@OCL (body="null")
		op Class getConcreteClass();
	}

	@OCL(inv="self.isPrimitive implies self.typeArguments->isEmpty()")
	@OCL(inv="self.isPrimitive implies self.implementationInterface->isEmpty()")
	@OCL(inv="self.implementationClass->notEmpty() and self.implementationClass.trim().length() > 0")
	class ClassImplementation extends Element {
		attr boolean[1] isPrimitive = false;
		attr String[1] implementationClass;
		attr String[0..1] implementationInterface;
		val TypeArgument[*] typeArguments;
	}

	// TODO: multiple inheritance can lead to problems with resolution of type parameters binding
	//  if the same class with different type arguments is extended by one class (transitively)
	@OCL (inv="self.isPrimitive() implies (
					self.allProperties()->isEmpty() and
					self.allParameters()->isEmpty() and
					self.typeParameters->isEmpty()
			)")
	@OCL (inv="self.isPrimitive() implies self.parentClasses->forAll(isPrimitive())")
	@OCL (inv="self.isNativeNotPrimitive() implies self.parentClasses->isEmpty()")
	@OCL (inv="not self.isPrimitive() implies self.parentClasses->forAll(x | not x.isPrimitive())")
	@OCL (inv="self.ownedProperties->includesAll(self.ownedParameters)")
	@OCL (inv="self.allProperties()->includesAll(self.allParameters())")
	@OCL (inv="self.allProperties().getGetterName()->union(self.allProperties().getSetterName())
				->intersection(self.allOperations().name)->isEmpty()")
	@OCL (inv="self.allParentClasses()->exists(oclIsKindOf(SAClass)) implies self.oclIsKindOf(SAClass)")
	@OCL (inv="self.parentTypes->isUnique(_concreteClass)")
	@OCL (inv="not self.allParentClasses().name->includes(self.name)")
	@OCL (inv="self.parentTypes->size() <= 1")
	@OCL (inv="self.parentTypes->forAll(pt | pt.getConcreteClass().typeParameters->size() = pt.typeArguments->size()
											and pt.typeArguments->forAll(not isWildcard()))")
	@OCL (inv="self.allOperations()->exists(o | o.isAbstract) implies self.isAbstract")
	@OCL (inv="(self.allOperations()->select(o | o.isAbstract).name->asSet()-self.allOperations()->select(o | not o.isAbstract).name->asSet())
			 	->notEmpty() implies self.isAbstract",
		  objs="(self.allOperations()->select(o | o.isAbstract).name->asSet()-self.allOperations()->select(o | not o.isAbstract).name->asSet())")
	// TODO: Temporary constraint - can be solved more generaly - but problems with DTO convertors (at least)
	@OCL (inv="self.isContainer implies
		(self.typeParameters->size() = 1 and self.isNativeNotPrimitive() and self.allProperties()->size() = 0)")
	@OCL (inv="self.allPrimitiveOperators()->isUnique(token)")
	@OCL (inv="self.allOperators()->select(isUnary)->isUnique(token)")
	@OCL (desc="Transferable class has all parents transferable and not transferable has all parents not transferable",
		  inv="let transferable : Boolean = self.libDTO().isPackageableElemTransferable(self) in
			    self.allParentClasses()->forAll(cl |
			    	transferable = self.libDTO().isPackageableElemTransferable(cl))
				")
	class Class extends InheritableElement, TemplateableElement, PackageableElement {

		attr boolean[1] isContainer = false;

		val ClassImplementation[0..1] implementation;
		val ConcreteTypeSpecification[*] parentTypes;
		
		//val expressions.Condition[*] constraints;
		
		@DVU (subsets="self.extensions")
		val extensions.ClassExt[*]#owningClass classOwnedExtensions;

		@DVU (subsets="self.ownedMembers")
		!ordered val Operation[*]#owningClass ownedOperations;

		@DVU (subsets="self.ownedMembers")
		!ordered val Property[*]#owningClass ownedProperties;

		!ordered ref Property[*] ownedParameters;

		!ordered val Operator[*]#owningClass ownedOperators;

		!ordered val PrimitiveOperator[*]#owningClass ownedPrimitiveOperators;

		@OCL (drv="self.getReferencedClasses()")
		!ordered unique derived readonly volatile transient ref Class[*] __referencedClasses;

		@DVU (subsets="self.parents")
		@OCL (drv="self.parentTypes.getConcreteClass()->asSet()")
		!ordered unique derived readonly volatile transient ref Class[*] parentClasses;

		@OCL (body="let arg : TypeArgument = self.parentTypes.getTypeArgument(param)->asSequence()->first() in
					if arg->notEmpty() then
						if arg.oclIsKindOf(TypeParameterReference) then
							self.getBinding(arg.oclAsType(TypeParameterReference).referencedTypeParameter)
						else
							arg
						endif
					else null endif
				")
		op TypeArgument[0..1] getBinding(TypeParameter param);

		@OCL (body="self.implementation->notEmpty()")
		op boolean isNative();

		@OCL (body="self.implementation->notEmpty() and not self.implementation.isPrimitive")
		op boolean isNativeNotPrimitive();

		@OCL (body="self.implementation->notEmpty() and self.implementation.isPrimitive")
		op boolean isPrimitive();

		@OCL (body="not self.isPrimitive() or self.libString().contains(self.implementation.implementationClass,'.')")
		op boolean isObjectType();

		@OCL (body="self = other or self.allParentClasses()->includes(other)")
		op boolean hasSuperClass(Class other);

		@OCL (body="null")  //intentionaly null
		op TemplateableElement[0..1] getEnclosingElement();

		@OCL (body="self.ownedProperties->select(isReadable or isSettable)")
		!ordered op Property[*] getVisibleProperties();

		@OCL (body="self.getVisibleProperties()->union(
						self.allParentClasses().getVisibleProperties()->asSet()
					)")
		!ordered op Property[*] getAllVisibleProperties();

		@OCL (body="self.allParents().oclAsType(Class)->asSet()")
		!ordered op Class[*] allParentClasses();

		@OCL (body="self.parentClasses.allOperations()->asSet()")
		!ordered op Operation[*] allParentOperations();

		@OCL (body="self.parentClasses.allProperties()->asSet()")
		!ordered op Property[*] allParentProperties();

		@OCL (body="self.parentClasses.allParameters()->asSet()")
		!ordered op Property[*] allParentParameters();

		@OCL (body="self.ownedOperations->union(
						self.parentClasses.allOperations()->asSet()
				- self.ownedOperations.redefinedElement.oclAsType(Operation)->asSet()
			)")
		!ordered op Operation[*] allOperations();

		@OCL (body="if self.oclIsKindOf(saclasses::SAOperationsOwner) then
						self.oclAsType(saclasses::SAOperationsOwner).allStateAwareOperations()
					else
						Set{}.oclAsType(kernel::Operation)->asSet()
					endif")
		!ordered op Operation[*] getAllSAOperations();


		@OCL (body="if self.oclIsKindOf(saclasses::SAOperationsOwner) then
						self.oclAsType(saclasses::SAOperationsOwner).ownedStateAwareOperations
					else
						Set{}.oclAsType(kernel::Operation)->asSet()
					endif")
		!ordered op Operation[*] getOwnedSAOperations();

		@OCL (body="self.ownedProperties->union(
						self.allParentClasses().ownedProperties->asSet()
					)")
		!ordered op Property[*] allProperties();

		@OCL (body="self.ownedParameters->union(
						self.allParentClasses().ownedParameters->asSet()
					)")
		!ordered op Property[*] allParameters();

		@OCL (body="self.ownedOperators->union(
						self.allParentClasses().ownedOperators->asSet()
					)")
		!ordered op Operator[*] allOperators();

		@OCL (body="self.ownedPrimitiveOperators->union(
						self.allParentClasses().ownedPrimitiveOperators->asSet()
					)")
		!ordered op PrimitiveOperator[*] allPrimitiveOperators();

		@OCL (body="self.allOperators()->select(
						op | op.isUnary and op.token = opToken
					)->asSequence()->first()")
		op Operator[0..1] findUnaryOperator(String opToken);

		@OCL (body="self.allOperators()->select(
						op | not op.isUnary and op.token = opToken and op.operation.parameters->notEmpty()
							and parameterClass.hasSuperClass(op.operation.parameters->first().getConcreteClass())
					)")
		!ordered op Operator[*] findBinaryOperators(String opToken, Class parameterClass);

		@OCL (body="self.allOperators()->select(
						op | not op.isUnary and op.token = opToken and op.operation.parameters->notEmpty()
							and parameterClass = op.operation.parameters->first().getConcreteClass()
					)->asSequence()->first()")
		op Operator[0..1] findExactBinaryOperator(String opToken, Class parameterClass);

		@OCL (body="self.ownedOperations.getReferencedClasses()->union(
						self.ownedProperties.type.getReferencedClasses()->asSet()
				   )->union(
						self.parentClasses->asSet()
				   )->union(
				   		self.typeParameters.upperBound->reject(x|x->isEmpty()).getReferencedClasses()->asSet()
				   )->asSet()")
		!ordered unique op Class[*] getReferencedClasses();
	}

	class EnumerationLiteral extends NamedElement {
		@DVU(subsets="self.namespace")
		derived readonly ref Enumeration[1]#ownedLiterals owningClass;
	}

	@OCL(desc="Enumeration cannot inherit from other Enumeration",
		 inv= "self.parentClasses->select(oclIsKindOf(kernel::Enumeration))->isEmpty()")
	@OCL(inv= "self.allParameters()->isEmpty() and self.allProperties()->isEmpty()
				 and self.typeParameters->isEmpty()")
	class Enumeration extends Class {
		@DVU (subsets="self.ownedMembers")
		val EnumerationLiteral[+]#owningClass ownedLiterals;
		//ref Enumeration[*] includes;
	}

	class TypedElement extends Element {
		val TypeSpecification[0..1] type;

		@OCL (body="if self.type->notEmpty() then
						self.type.getConcreteClass()
					else null endif")
		op Class[0..1] getConcreteClass();

		@DVU (subsets="self.extensions")
		val extensions.TypedElementExt[*]#owningTypedElement typedElementOwnedExtensions;
	}

	@OCL (desc="Query must return a value.",
		  inv ="self.isQuery implies self.type->notEmpty()")
	@OCL (inv ="self.isNative implies self.owningClass.isNative()")
	@OCL (inv ="self.redefinedOperation->notEmpty() implies
					(self.isQuery = self.redefinedOperation.isQuery
					and self.isStatic = self.redefinedOperation.isStatic
					and not self.redefinedOperation.isFinal
					and not self.isAbstract)",
		  objs="Set{self.redefinedOperation}")
	@OCL (inv ="self.parameters->isUnique(name)")
	@OCL (rcm ="self.redefinedOperation->notEmpty() implies
				(self.parameters.name->includesAll(self.redefinedOperation.parameters.name) and
				 self.redefinedOperation.parameters.name->includesAll(self.parameters.name))",
		  objs="Set{self.redefinedOperation}")
	@OCL (desc="static operations not supported yet",
		  inv ="not self.isStatic")
	// TODO: this is only temporary assumption
	@OCL (inv ="self.isQuery and self.hasBody() implies
				self.getBody().expressions->size() >= 1")
	@OCL (inv="self.hasImplementation() implies not self.isAbstract")
	@OCL (desc="Operation can be implemented as primitive operator only if the owning class is primitive",
		  inv ="self.implementation->notEmpty() implies
					(self.owningClass.isPrimitive() or not self.implementation.oclIsKindOf(OperationAsOperator))")
	class Operation extends RedefinableElement, TypedElement, Namespace, TemplateableElement {
		attr boolean[1] isAbstract = false;
		attr boolean[1] isStatic = false;
		attr boolean[1] isQuery = true;
		attr boolean[1] isNative = false;
		attr boolean[1] isFinal = false;

		@DVU (subsets="self.ownedMembers")
		ordered val Parameter[*]#operation parameters;

		val OperationImplementation[0..1]#owningOperation implementation;

		@OCL (body="self.implementation->notEmpty()")
		op boolean hasImplementation();

		@OCL (body="self.implementation->notEmpty() and self.implementation.oclIsKindOf(OperationBody)")
		op boolean hasBody();

		@OCL (body="if self.hasBody() then
						self.implementation.oclAsType(OperationBody)
					else null endif")
		op OperationBody[0..1] getBody();

		@OCL (body="self.implementation->notEmpty() and self.implementation.oclIsKindOf(OperationAsOperator)")
		op boolean implementedAsOperator();

		@OCL (body="self.owningClass")
		op TemplateableElement[0..1] getEnclosingElement();

		@DVU (subsets="self.redefinedElement")
		ref Operation[0..1] redefinedOperation;

		@DVU (subsets="self.redefinitionContext")
		@DVU (subsets="self.namespace")
		readonly ref Class[1]#ownedOperations owningClass;

		//TODO: overit platnost! + nefunguji generics
		@OCL (body="redefinee.oclIsKindOf(Operation) and
					let op: Operation = redefinee.oclAsType(Operation) in
						op.owningClass.allParentClasses()->includes(self.owningClass) and
						self.parameters->size() = op.parameters->size() and
						self.parameters->forAll(par |
							par.type.getConcreteClass()->notEmpty() and
							par.type.getConcreteClass() = op.parameters->at(self.parameters->indexOf(par)).type.getConcreteClass()
--							true
						) and
						((self.type->isEmpty() and op.type->isEmpty()) or
						 (self.type->notEmpty() and op.type->notEmpty() and
							 op.type.hasSuperType(self.type)
							)
						)")
		op Boolean isRedefinableBy(RedefinableElement[1] redefinee);

		@OCL (body="let types : Set(TypeSpecification) = self.parameters->collect(type)->asSet()->union(Set{self.type}) in
					if types->isEmpty() then
						Set{}
					else
						types.getReferencedClasses()->asSet()
					endif")
		!ordered unique op Class[*] getReferencedClasses();

		@OCL (drv="self.getReferencedClasses()")
		!ordered unique derived readonly volatile transient ref Class[*] __referencedClasses;
	}

	abstract class OperationImplementation extends Element {
		derived readonly ref Operation[0..1]#implementation owningOperation;
	}

	class OperationBody extends OperationImplementation {

		@OCL(body="self.expressions->isEmpty()")
		op boolean isEmpty();

		//ordered val expressions.Expression[1..*] expressions;
	}

	@OCL (inv= "self.owningOperation->notEmpty() and
				self.owningOperation.owningClass = self.primitiveOperator.owningClass")
	class OperationAsOperator extends OperationImplementation {
		ref PrimitiveOperator[1] primitiveOperator;
	}

	@OCL (inv="not self.operation.isAbstract")
	class ExternalOperationBody extends OperationBody {
		ref Operation[1] operation;
	}

	@OCL (inv="self.extendingClass.ownedOperations->includesAll(self.bodies.operation)")
	class ClassOperationBodiesExtent extends Element {
		ref Class[1] extendingClass;
		val ExternalOperationBody[*] bodies;
	}

	class ClassConstraintsExtent extends Element {
		ref Class[1] extendingClass;
		//val expressions.Condition[*] constraints;
	}

	@OCL (inv="not self.isReadable implies not self.isSettable")
//	@OCL (inv="self.type.isNative() implies self.isContainment")
	@OCL (desc="Initialization expression is overriden by setting as a class parameter",
		  rcm="self.initialValue->notEmpty() implies not self.owningClass.allParameters()->includes(self)")
	@OCL (inv ="self.type->notEmpty()")
	@OCL (desc="Collection is initialized to empty collection, should not be initialized by expression (for now)",
		  inv ="self.type.isConcrete() and
					self.type.getConcreteClass().isContainer implies
				self.initialValue->isEmpty()")
	@OCL (inv ="self.opposite->notEmpty() implies
					self.opposite.opposite->notEmpty() and
					self.opposite.opposite = self and
					self.opposite <> self
				")
	class Property extends NamedElement, TypedElement {
		attr int[1] modifiers = 3; // 1+2 - for internal use only
		attr boolean[1] isSettable = true; //1
		attr boolean[1] isReadable = true;  //2
		attr boolean[1] isContainment = false; //4
		attr boolean[1] isOptional = false; //8

		ref Property[0..1] opposite;

		//val expressions.Expression[0..1] initialValue;
		//val expressions.Condition[0..*] constraints;

		@DVU (subsets="self.namespace")
		readonly ref Class[1]#ownedProperties owningClass;

		@DVU (subsets="self.extensions")
		val extensions.PropertyExt[*]#owningProperty propertyOwnedExtensions;

		@OCL (body="self.libString().constructGetterName(self.name)")
		op String getGetterName();

		@OCL (body="self.libString().constructSetterName(self.name)")
		op String getSetterName();

		@OCL (body="self.libString().constructPropertyName(self.name)")
		op String getTranslatedPropertyName();

		@OCL (body="self.type.isConcrete() and self.getConcreteClass().isContainer")
		op Boolean isContainer();

		@OCL (body="if self.isContainer() then
						self.type.oclAsType(kernel::ConcreteTypeSpecification).getClassInContainer()
					else null endif")
		op Class[0..1] getClassInContainer();
	}

	@OCL (inv ="self.type->notEmpty()")
	class Parameter extends NamedElement, TypedElement {
		@DVU (subsets="self.namespace")
		readonly ref Operation[1]#parameters operation;
	}

	@OCL(desc="Operators must be implemented by operations form the same class or parent class",
		 inv= "self.operation.owningClass.parents->union(Set{self.operation.owningClass})->includes(self.owningClass)")
	@OCL(desc="Unary operator's operation must not have any parameter",
		 inv= "self.isUnary implies self.operation.parameters->size() = 0")
	@OCL(desc="Binary operator's operation must have exactly one parameter",
		 inv= "not self.isUnary implies self.operation.parameters->size() = 1")
	@OCL(inv= "Set{'<','<=','==','!=','>=','>','not','and','or','xor','>>','<<','^','&',
					'|','+','-','*','/','/'+'/','%%'}->includes(self.token)")
	class Operator extends Element {
		attr String[1] token;
		attr boolean[1] isUnary = false; // by default it is binary
		ref Operation[1] operation;
		derived readonly ref Class[1]#ownedOperators owningClass;
	}

	class PrimitiveOperator extends Element {
		attr String[1] token;
		attr boolean[1] isUnary = false; // by default it is binary
		derived readonly ref Class[1]#ownedPrimitiveOperators owningClass;
	}
}

@namespace(uri="http://www.collectionspro.eu/jam/mm/extensions", prefix="ext")
package extensions {

	@OCL (inv ="self.extensions->isEmpty()")
	abstract class Extension extends Element {
	}

	abstract class ClassExt extends Extension {
		derived readonly ref kernel.Class[1]#classOwnedExtensions owningClass;
	}

	abstract class TypedElementExt extends Extension {
		derived readonly ref kernel.TypedElement[1]#typedElementOwnedExtensions owningTypedElement;
	}

	abstract class PropertyExt extends Extension {
		derived readonly ref kernel.Property[1]#propertyOwnedExtensions owningProperty;
	}

	abstract class PackageableElementExt extends Extension {
		derived readonly ref kernel.PackageableElement[1]#packageableElementOwnedExtensions owningPackageableElement;
	}

@namespace(uri="http://www.collectionspro.eu/jam/mm/extensions/serialization", prefix="ser")
package serialization {

	enum FetchType {
		__not_defined;
		eager;
		lazy;
	}

	enum CascadeType {
		__not_defined;
		all;
		delete;
		deleteOrphan;
		evict;
		lock;
		merge;
		persist;
		refresh;
		remove;
		replicate;
		saveUpdate;
	}

	enum InheritanceType {
		__not_defined;
		singleTable;
		tablePerClass;
		joined;
	}

	enum ReferenceType {
		__not_defined;
		basic;
		oneToOne;
		manyToOne;
		oneToMany;
	}

	@OCL (inv="self.isEmbedded implies
				(self.tableName->isEmpty() and
				 self.inheritanceType = serialization::InheritanceType::__not_defined and
				 self.primaryKeyJoinColumn->isEmpty())")
	@OCL (desc="Embedded class: There must be defined embedding column name pattern for each property",
		  inv="self.isEmbedded implies self.owningClass.allProperties()->forAll(
					prop | prop.extensions->exists(
						ext | ext.oclIsKindOf(serialization::PropertySerialization)
							  and ext.oclAsType(serialization::PropertySerialization).isEmbedded
					)
				)")
	@OCL (desc="There must be defined serialization strategy for all properties",
		  inv="self.owningClass.allProperties()->forAll(
					prop | prop.libSerialization().hasPropertySerialization(prop)
				)")
	@OCL (desc="There must be defined serialization strategy for all parent classes",
		  inv="self.owningClass.allParentClasses()->forAll(
					pc | pc.libSerialization().hasClassSerialization(pc)
				)")
	@OCL (desc="There must be just 1 ID defined for not embedded not native domain class",
		  inv="not self.owningClass.isNative() and not self.isEmbedded and not self.owningClass.oclIsKindOf(StateMachine)
		  			implies
		       self.owningClass.allProperties()->select(
					prop | prop.libSerialization().hasPropertySerialization(prop)
						and prop.libSerialization().getPropertySerialization(prop).isID
				)->size() = 1")
	@OCL (desc="Embedded class: All parents must be embedded too",
		  inv="self.isEmbedded implies self.owningClass.allParentClasses()->forAll(
					cls | cls.extensions->exists(
						ext | ext.oclIsKindOf(serialization::ClassSerialization)
							  and ext.oclAsType(serialization::ClassSerialization).isEmbedded
					)
				)")
	@OCL (inv="self.primaryKeyJoinColumn->notEmpty() implies
				self.primaryKeyJoinColumn.owningClass = self.owningClass")
	@OCL (inv="self.owningClass.extensions->select(oclIsKindOf(ClassSerialization))->size() = 1")
	class ClassSerialization extends extensions.ClassExt {
		attr boolean[1] isEmbedded = false;

		attr String[0..1] tableName;
		attr InheritanceType[1] inheritanceType;
		ref kernel.Property[0..1] primaryKeyJoinColumn;

		@OCL (body="self.owningClass.allProperties()->collect(p | p.libSerialization().getPropertySerialization(p))
				->select(isID)->asSequence()->first()")
		op PropertySerialization[0..1] getId();
	}

	@OCL (inv="not self.owningClass.extensions->exists(oclIsKindOf(ClassSerialization))")
	class NotEntity extends extensions.ClassExt {
		attr boolean[1] dummy;
	}

	@OCL (inv= "let type : kernel::TypeSpecification = self.serialization.owningProperty.type in
				type.isConcrete() and
				type.getConcreteClass().allProperties()->includes(self.attribute)
	")
	@OCL (desc="embedded attribute overriding not supported yet", inv= "false")
	class AttributeOverride extends Element {
		ref kernel.Property[1] attribute;
		attr String[1] overrideName;

		derived readonly ref PropertySerialization[1]#attributeOverrides serialization;
	}

	@OCL (inv="(self.isTransient or self.isEmbedded) implies
				(self.columnName->isEmpty() and
				 self.indexColumnName->isEmpty() and
				 self.joinColumnName->isEmpty() and
				 not self.isEmbeddingOverridden and
				 not self.isID
			)")
	@OCL (inv="self.isTransient implies
				(self.fetchType = serialization::FetchType::__not_defined and
				 self.cascadeType->isEmpty()
			)")
	@OCL (inv="self.columnNamePattern->notEmpty() implies self.isEmbedded")
	@OCL (inv="self.sequenceName->notEmpty() implies self.isID")
	@OCL (inv="self.attributeOverrides->notEmpty() implies self.isEmbeddingOverridden")
	@OCL (inv="self.owningProperty.extensions->select(oclIsKindOf(PropertySerialization))->size() = 1")
	@OCL (inv="self.owningProperty.owningClass.extensions->exists(
						ext | ext.oclIsKindOf(serialization::ClassSerialization)
			)")
	@OCL (inv="self.isID implies self.owningProperty.type.isConcrete()
				and self.owningProperty.type.getConcreteClass().isPrimitive()")
	class PropertySerialization extends extensions.PropertyExt {

		attr boolean[1] isEmbedded = false;
		attr String[0..1] columnNamePattern;

		attr boolean[1] isTransient = false;

		attr boolean[1] isEmbeddingOverridden = false;
		val AttributeOverride[*]#serialization attributeOverrides;

		attr boolean[1] isID = false;
		attr String[0..1] sequenceName;

		attr String[0..1] columnName;
		attr String[0..1] indexColumnName;
		attr String[0..1] joinColumnName;
		attr FetchType[1] fetchType;
		attr CascadeType[*] cascadeType;

		@OCL (body="if self.isEmbedded or self.isTransient or self.isEmbeddingOverridden then
						ReferenceType::__not_defined
					else
						let type : kernel::TypeSpecification = self.owningProperty.type in
						if type.isConcrete() then (
							if type.getConcreteClass().isPrimitive() then
								ReferenceType::basic
							else if type.getConcreteClass().isContainer then
								ReferenceType::oneToMany
							else
								ReferenceType::manyToOne
							endif endif
						) else
							 ReferenceType::manyToOne
						endif
					endif")
		op ReferenceType getReferenceType();
	}

	class SerializationLibrary extends Library {
		@OCL(body="self.getPropertySerialization(pr)->notEmpty()")
		op Boolean hasPropertySerialization(kernel.Property pr);

		@OCL(body="self.getClassSerialization(cls)->notEmpty()")
		op Boolean hasClassSerialization(kernel.Class cls);

		@OCL(body="cls.extensions->exists(oclIsKindOf(extensions::serialization::NotEntity))")
		op Boolean isNotEntity(kernel.Class cls);

		@OCL(body="
			let ext : Sequence(extensions::serialization::ClassSerialization)
				= cls.extensions->select(oclIsKindOf(extensions::serialization::ClassSerialization))
					.oclAsType(extensions::serialization::ClassSerialization)->asSequence() in
			ext->first()")
		derived op ClassSerialization[0..1] getClassSerialization(kernel.Class cls);

		@OCL(body="
			let ext : Sequence(extensions::serialization::PropertySerialization)
				= pr.extensions->select(oclIsKindOf(extensions::serialization::PropertySerialization))
					.oclAsType(extensions::serialization::PropertySerialization)->asSequence() in
			ext->first()")
		op PropertySerialization[0..1] getPropertySerialization(kernel.Property pr);

		@OCL(body="self.hasClassSerialization(cls) and self.getClassSerialization(cls).isEmbedded")
		op boolean isEmbedded(kernel.Class cls);

		@OCL(body="
			ser.owningClass.allProperties()->select(pr : kernel::Property |
				self.hasPropertySerialization(pr) and self.getPropertySerialization(pr).sequenceName->notEmpty()
			)")
		!ordered op kernel.Property[*] getSequenceGeneratorProperties(ClassSerialization ser);

	}
}
}

@namespace(uri="http://www.collectionspro.eu/jam/mm/rdb", prefix="mmrdb")
package rdb {
	
	abstract class DbObject extends kernel.NamedElement {
	}
	
	class Schema extends DbObject, kernel.Namespace {
		
		@DVU (subsets="self.ownedMembers")
		val Table[*]#owningSchema tables;
		
		@DVU (subsets="self.ownedMembers")
		val Sequence[*]#owningSchema sequences;

		@DVU (subsets="self.ownedMembers")
		!ordered val Index[*]#owningSchema indexes;
	}
	
	@OCL (inv= "self.primaryKey->notEmpty() implies in self.indexes->contains(self.primaryKey)")
	class Relation extends kernel.Namespace {

		@DVU (union="true")
		derived readonly volatile transient !ordered ref Column[*] columns;
	}

	@OCL (inv= "self.primaryKey->notEmpty() implies in self.indexes->contains(self.primaryKey)")
	class Table extends DbObject, Relation {
	
		@DVU (subsets="self.namespace")	
		derived readonly ref Schema[1]#tables owningSchema;
	
		ref PrimaryKey[0..1] primaryKey;
		
		@OCL (body="if self.primaryKey->isEmpty() then
						null
					else
						self.primaryKey.underlyingIndex.columns->first()
					endif
					")
		op Column[0..1] getPrimaryColumn();
	
		@DVU (subsets="self.ownedMembers")
		@DVU (subsets="self.columns")
		ordered val TableColumn[*]#_owningTable ownedColumns;
	
		@DVU (subsets="self.ownedMembers")
		!ordered val TableConstraint[*]#owningTable constraints;
	}
	
	class Sequence extends DbObject {
		derived readonly ref Schema[1]#sequences owningSchema;
		attr int cacheSize;
	}
	
	abstract class Constraint extends DbObject {
		
	}
	
	abstract class TableConstraint extends Constraint, kernel.NamedElement {
		@DVU (subsets="self.namespace")	
		derived readonly ref Table[1]#constraints owningTable;	   
	}
	
	abstract class ColumnConstraint extends Constraint {
		derived readonly ref TableColumn[1]#constraints owningColumn;
	}
	
	@OCL(inv="self.constrainedColumn.owningTable = self.targetTable)")
	@OCL(inv="self.targetTable.getPrimaryColumn()->notEmpty()")
	class ForeignKey extends TableConstraint {
		ref Table[1] targetTable;
		ref TableColumn[1] constrainedColumn;
	}
	
	abstract class Column extends kernel.NamedElement {
	
		// Default implementation
		op Table getOwningTable();
	}
	
	class TableColumn extends Column {
		@DVU (subsets="self.namespace")	
		derived readonly ref Table[1]#ownedColumns _owningTable;
		
		!ordered val ColumnConstraint[*]#owningColumn constraints;
		
		@OCL(body="self._owningTable")
		op Table getOwningTable();
	}
	
	@OCL(inv="let first : TableColumn = self.columnsMap->first() in
			  self.columns->forAll(col | col._owningTable = first._owningTable)")
	class Index extends DbObject {
		ordered ref TableColumn[1..*] columns;
		
		@OCL(drv ="self.columns->first()._owningTable")
		transient derived readonly volatile 
			ref Table[1] indexedTable;
		
		@DVU (subsets="self.namespace")	
		derived readonly ref Schema[1]#indexes owningSchema;
	}
	
	@OCL(inv= "self.owningTable = self.underlyingIndex.indexedTable")
	class UniqueIndex extends TableConstraint {
		ref Index[1] underlyingIndex; 
	}

	@OCL(inv= "self.underlyingIndex.columns.size() = 1")
	class PrimaryKey extends UniqueIndex {
	}

@namespace(uri="http://www.collectionspro.eu/jam/mm/rdb-dml", prefix="mmrdb-dml")
package dml {
	class Query extends Relation {
		@DVU(subsets="self.columns")
		val ColumnReference[1..*] columnReferences;
		// ...
	}
	
	class ColumnReference extends Column {
		ref Column[1] reference;
	}
	
	/*
		... 
	*/
}

}
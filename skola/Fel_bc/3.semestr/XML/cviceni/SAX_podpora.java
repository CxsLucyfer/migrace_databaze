package y36xml;

import org.xml.sax.ContentHandler;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.XMLReaderFactory;
import org.xml.sax.Attributes;

public class SAX_podpora {

    public static void main(String[] args) {
        // Cesta ke zdrojov√©mu XML dokumentu  
        String sourcePath = "src/objednavka.xml";

        try {
            
            // Vytvor√≠me instanci parseru.
            XMLReader parser = XMLReaderFactory.createXMLReader();
            
            // Vytvor√≠me vstupn√≠ proud XML dat.
            InputSource source = new InputSource(sourcePath);
            
            // Nastav√≠me n√°ƒÖ vlastn√≠ content handler pro obsluhu SAX ud√°lost√≠.
            parser.setContentHandler(new MujContentHandler());
            
            // Zpracujeme vstupn√≠ proud XML dat.
            parser.parse(source);
            
        } catch (Exception e) {
        
            e.printStackTrace();
            
        }
        
    }
    
}

/**
 * N√°≈° vlastn√≠ content handler pro obsluhu SAX ud√°lost√≠.
 * Implementuje metody interface ContentHandler. 
 */ 
class MujContentHandler implements ContentHandler {
    // Umo≈æ≈àuje zac√≠lit m√≠sto v dokumentu, kde vznikla aktualn√≠ ud√°lost
    String text= new String();
    boolean podelement=false;
    boolean objednavkaMod=false;
    boolean chyba=false;
    Locator locator;
    String partialText;
    
    /**
     * Nastav√≠ locator
     */     
    public void setDocumentLocator(Locator locator) {
        this.locator = locator;
    }

    /**
     * Obsluha ud√°losti "zaƒ?√°tek dokumentu"
     */     
    public void startDocument() throws SAXException {
        
    }
    /**
     * Obsluha ud√°losti "konec dokumentu"
     */     
    public void endDocument() throws SAXException {
         if(chyba==false) {System.out.println("Element objednavka je prazdny");};
        // ...
        
    }
    
    /**
     * Obsluha ud√°losti "zaƒ?√°tek elementu".
     * @param uri URI jmenn√©ho prostoru elementu (pr√°zdn√©, pokud element nen√≠ v ≈æ√°dn√©m jmenn√©m prostoru)
     * @param localName Lok√°ln√≠ jm√©no elementu (v≈ædy nepr√°zdn√©)
     * @param qName Kvalifikovan√© jm√©no (tj. prefix-uri + ':' + localName, pokud je element v nƒõjak√©m jmenn√©m prostoru, nebo localName, pokud element nen√≠ v ≈æ√°dn√©m jmenn√©m prostoru)
     * @param atts Atributy elementu     
     */     
    public void startElement(String uri, String localName, String qName, Attributes atts) throws SAXException {
         // zjistim, kde jsem pomoci localName.equals(), nastavim mistoMod=true
        // ...

        if (localName.equals("objednavka")){objednavkaMod=true; podelement=false;}
        if (objednavkaMod){podelement=true;}

    }
    /**
     * Obsluha ud√°losti "konec elementu"
     * Parametry maj√≠ stejn√Ω v√Ωznam jako u @see startElement     
     */     
    public void endElement(String uri, String localName, String qName) throws SAXException {

        if (objednavkaMod==false & podelement==false){chyba=true;}
        
        // ...

    }
    
    /**
     * Obsluha ud√°losti "znakov√° data".
     * SAX parser muƒæe znakov√° data d√°vkovat jak chce. Nelze tedy poc√≠tat s t√≠m, ≈æe je cel√Ω text dorucen v r√°mci jednoho vol√°n√≠.
     * Text je v poli (ch) na pozicich (start) az (start+length-1).
     * @param ch Pole se znakov√Ωmi daty
     * @param start Index zac√°tku √∫seku platn√Ωch znakov√Ωch dat v poli.
     * @param length D√©lka √∫seku platn√Ωch znakov√Ωch dat v poli.
     */               
    public void characters(char[] ch, int start, int length) throws SAXException {
        // ...
        
    }
    
    /**
     * Obsluha ud√°losti "deklarace jmenn√©ho prostoru".
     * @param prefix Prefix prirazen√Ω jmenn√©mu prostoru.
     * @param uri URI jmenn√©ho prostoru.
     */     
    public void startPrefixMapping(String prefix, String uri) throws SAXException {
        
        // ...
        
    }

    /**
     * Obsluha ud√°losti "konec platnosti deklarace jmenn√©ho prostoru".
     */     
    public void endPrefixMapping(String prefix) throws SAXException {
    
        // ...
    
    }

    /**
     * Obsluha ud√°losti "ignorovan√© b√≠l√© znaky".
     * Stejn√© chov√°n√≠ a parametry jako @see characters     
     */     
    public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException {
        
        // ...
        
    }

    /**
     * Obsluha ud√°losti "instrukce pro zpracov√°n√≠".
     */         
    public void processingInstruction(String target, String data) throws SAXException {
      
      // ...
            
    }

    /**
     * Obsluha ud√°losti "nezpracovan√° entita"
     */         
    public void skippedEntity(String name) throws SAXException {
    
      // ...
    
    }
}